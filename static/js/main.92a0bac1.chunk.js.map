{"version":3,"sources":["Nav.js","About.js","Shop.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","color","react_default","a","createElement","className","react_router_dom","style","to","About","Shop","useEffect","fetchItems","_useState","useState","_useState2","Object","slicedToArray","setItems","_ref","asyncToGenerator","regenerator_default","mark","_callee","data","items","wrap","_context","prev","next","fetch","sent","json","console","log","abrupt","map","item","name","stop","apply","this","arguments","Home","App","src_Nav","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAqCeA,MAjCf,WAGE,IAAMC,EACN,CACEC,MAAM,SAKR,OAKEC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kBAEAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAEdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,MAAOP,EAAUQ,GAAG,UAC1BN,EAAAC,EAAAC,cAAA,oBAGAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,MAAOP,EAAUQ,GAAG,SAC1BN,EAAAC,EAAAC,cAAA,sBClBOK,MARf,WACE,OACEP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,2DCsCOM,MAzCf,WAGAC,oBAAU,WAEVC,KAEE,IAPc,IAAAC,EASUC,mBAAS,IATnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GASFK,GATEH,EAAA,GAAAA,EAAA,IAWRH,EAAU,eAAAO,EAAAH,OAAAI,EAAA,EAAAJ,CAAAK,EAAAlB,EAAAmB,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAlB,EAAAuB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEKC,MAAM,qEAFX,cAETN,EAFSG,EAAAI,KAAAJ,EAAAE,KAAA,EAGKL,EAAKQ,OAHV,cAGTP,EAHSE,EAAAI,KAIfE,QAAQC,IAAIT,EAAMA,OAClBP,EAASO,EAAMA,OALAE,EAAAQ,OAAA,SASfjC,EAAAC,EAAAC,cAAA,WAEKqB,EAAMW,IAAI,SAAAC,GAAI,OAEbnC,EAAAC,EAAAC,cAAA,cAAMiC,EAAKC,KAAX,SAbS,wBAAAX,EAAAY,SAAAhB,MAAH,yBAAAJ,EAAAqB,MAAAC,KAAAC,YAAA,GAuBhB,OACExC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,gCCbR,IAAMuC,EAAO,kBAEXzC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBAOWwC,EA7Bf,WACE,OACE1C,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACA5C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWN,IACjCzC,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAOC,KAAK,SAASE,UAAWxC,IAChCP,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAOC,KAAK,QAAQE,UAAWvC,QCHfwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.92a0bac1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n\r\n\r\n  const navStyle = \r\n  {\r\n    color:'white'\r\n  }\r\n\r\n\r\n\r\n  return (\r\n\r\n\r\n \r\n\r\n    <nav>\r\n        <h3>Logo</h3>\r\n\r\n        <ul className=\"nav-links\">\r\n\r\n        <Link style={navStyle} to='/about'>\r\n        <li>About</li>\r\n        </Link>\r\n\r\n        <Link style={navStyle} to='/shop'>\r\n        <li>Shop</li>\r\n        </Link>\r\n\r\n        </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n        <h1>About Page</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\n\r\nfunction Shop() {\r\n\r\n\r\nuseEffect(() => {\r\n\r\nfetchItems();\r\n\r\n},[]);\r\n\r\nconst [items, setItems] = useState([]);\r\n\r\n  const fetchItems = async () => {\r\n\r\n      const data  = await fetch('https://fortnite-public-api.theapinetwork.com/prod09/upcoming/get');\r\n      const items = await data.json();\r\n      console.log(items.items);\r\n      setItems(items.items);\r\n\r\n\r\n      return(\r\n      <div>\r\n\r\n          {items.map(item => (\r\n\r\n            <h1> {item.name} </h1>\r\n\r\n          ) )}\r\n\r\n      </div>\r\n      );\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n        <h1>Shop Page</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Shop;\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\nimport About from './About';\nimport Shop from  './Shop';\nimport {BrowserRouter as Router, Switch, Route}  from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n    <Nav/>\n    <Switch>\n    <Route path=\"/\" exact component={Home} />\n    <Route path='/about' component={About}/>\n    <Route path='/shop' component={Shop}/>\n    </Switch>\n    </div>\n    </Router>\n  );\n\n\n}\n\n\n\nconst Home = () => \n(\n  <div>\n    <h1>Home Page</h1>\n  </div>\n)\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}